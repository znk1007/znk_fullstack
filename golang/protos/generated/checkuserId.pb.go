// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkuserId.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CheckUserIdRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Device  string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *CheckUserIdRequest) Reset()         { *m = CheckUserIdRequest{} }
func (m *CheckUserIdRequest) String() string { return proto.CompactTextString(m) }
func (*CheckUserIdRequest) ProtoMessage()    {}
func (*CheckUserIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_525c0f2cd9be3dbd, []int{0}
}
func (m *CheckUserIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckUserIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckUserIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckUserIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserIdRequest.Merge(m, src)
}
func (m *CheckUserIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckUserIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserIdRequest proto.InternalMessageInfo

func (m *CheckUserIdRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CheckUserIdRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type CheckUserIdResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	UserId  string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Status  int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CheckUserIdResponse) Reset()         { *m = CheckUserIdResponse{} }
func (m *CheckUserIdResponse) String() string { return proto.CompactTextString(m) }
func (*CheckUserIdResponse) ProtoMessage()    {}
func (*CheckUserIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525c0f2cd9be3dbd, []int{1}
}
func (m *CheckUserIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckUserIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckUserIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckUserIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckUserIdResponse.Merge(m, src)
}
func (m *CheckUserIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckUserIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckUserIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckUserIdResponse proto.InternalMessageInfo

func (m *CheckUserIdResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CheckUserIdResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CheckUserIdResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CheckUserIdResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*CheckUserIdRequest)(nil), "protos.checkuserId.CheckUserIdRequest")
	proto.RegisterType((*CheckUserIdResponse)(nil), "protos.checkuserId.CheckUserIdResponse")
}

func init() { proto.RegisterFile("checkuserId.proto", fileDescriptor_525c0f2cd9be3dbd) }

var fileDescriptor_525c0f2cd9be3dbd = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0x48, 0x4d,
	0xce, 0x2e, 0x2d, 0x4e, 0x2d, 0xf2, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x02,
	0x53, 0xc5, 0x7a, 0x48, 0x32, 0x4a, 0x6e, 0x5c, 0x42, 0xce, 0x20, 0x6e, 0x28, 0x98, 0x1b, 0x94,
	0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc1, 0xc5, 0x9e, 0x98, 0x9c, 0x9c, 0x5f, 0x9a, 0x57,
	0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x0a, 0x89, 0x71, 0xb1, 0xa5, 0xa4, 0x96,
	0x65, 0x26, 0xa7, 0x4a, 0x30, 0x81, 0x25, 0xa0, 0x3c, 0xa5, 0x62, 0x2e, 0x61, 0x14, 0x73, 0x8a,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x41, 0x06, 0xe5, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0xc2, 0x0c,
	0x82, 0x72, 0x85, 0x84, 0xb8, 0x58, 0x92, 0xf3, 0x53, 0x20, 0xc6, 0xb0, 0x06, 0x81, 0xd9, 0x20,
	0xc3, 0x21, 0xce, 0x92, 0x60, 0x86, 0x18, 0x0e, 0xe1, 0x81, 0xc4, 0x8b, 0x4b, 0x12, 0x4b, 0x4a,
	0x8b, 0x25, 0x58, 0xc0, 0xaa, 0xa1, 0x3c, 0xa3, 0x74, 0x2e, 0x6e, 0x24, 0x4b, 0x85, 0x22, 0xb8,
	0x58, 0xc1, 0x5e, 0x13, 0x52, 0xd3, 0xc3, 0xf4, 0xa9, 0x1e, 0xa6, 0x37, 0xa5, 0xd4, 0x09, 0xaa,
	0x83, 0x78, 0xc3, 0x49, 0xe1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xd8,
	0x20, 0x26, 0x24, 0x41, 0x68, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xc6, 0x4d, 0x4f,
	0x77, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CheckUserIdClient is the client API for CheckUserId service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckUserIdClient interface {
	Check(ctx context.Context, in *CheckUserIdRequest, opts ...grpc.CallOption) (*CheckUserIdResponse, error)
}

type checkUserIdClient struct {
	cc *grpc.ClientConn
}

func NewCheckUserIdClient(cc *grpc.ClientConn) CheckUserIdClient {
	return &checkUserIdClient{cc}
}

func (c *checkUserIdClient) Check(ctx context.Context, in *CheckUserIdRequest, opts ...grpc.CallOption) (*CheckUserIdResponse, error) {
	out := new(CheckUserIdResponse)
	err := c.cc.Invoke(ctx, "/protos.checkuserId.CheckUserId/check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckUserIdServer is the server API for CheckUserId service.
type CheckUserIdServer interface {
	Check(context.Context, *CheckUserIdRequest) (*CheckUserIdResponse, error)
}

// UnimplementedCheckUserIdServer can be embedded to have forward compatible implementations.
type UnimplementedCheckUserIdServer struct {
}

func (*UnimplementedCheckUserIdServer) Check(ctx context.Context, req *CheckUserIdRequest) (*CheckUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

func RegisterCheckUserIdServer(s *grpc.Server, srv CheckUserIdServer) {
	s.RegisterService(&_CheckUserId_serviceDesc, srv)
}

func _CheckUserId_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckUserIdServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.checkuserId.CheckUserId/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckUserIdServer).Check(ctx, req.(*CheckUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckUserId_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.checkuserId.CheckUserId",
	HandlerType: (*CheckUserIdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "check",
			Handler:    _CheckUserId_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkuserId.proto",
}

func (m *CheckUserIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserIdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckuserId(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckuserId(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	return i, nil
}

func (m *CheckUserIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckUserIdResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckuserId(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCheckuserId(dAtA, i, uint64(m.Code))
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckuserId(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCheckuserId(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintCheckuserId(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckUserIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCheckuserId(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovCheckuserId(uint64(l))
	}
	return n
}

func (m *CheckUserIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCheckuserId(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovCheckuserId(uint64(m.Code))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovCheckuserId(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCheckuserId(uint64(m.Status))
	}
	return n
}

func sovCheckuserId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCheckuserId(x uint64) (n int) {
	return sovCheckuserId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckUserIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckuserId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckuserId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckuserId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckuserId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckUserIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckuserId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckUserIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckUserIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckuserId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckuserId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckuserId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckuserId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckuserId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckuserId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckuserId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheckuserId
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCheckuserId
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckuserId
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckuserId(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCheckuserId
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckuserId = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckuserId   = fmt.Errorf("proto: integer overflow")
)
