// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: activeuser.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActiveUserRequest struct {
	Accounts     []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	AdminAccount string   `protobuf:"bytes,2,opt,name=adminAccount,proto3" json:"adminAccount,omitempty"`
	AdminUserId  string   `protobuf:"bytes,3,opt,name=adminUserId,proto3" json:"adminUserId,omitempty"`
	Active       bool     `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Device       string   `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *ActiveUserRequest) Reset()         { *m = ActiveUserRequest{} }
func (m *ActiveUserRequest) String() string { return proto.CompactTextString(m) }
func (*ActiveUserRequest) ProtoMessage()    {}
func (*ActiveUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15b55294bed548b5, []int{0}
}
func (m *ActiveUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveUserRequest.Merge(m, src)
}
func (m *ActiveUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActiveUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveUserRequest proto.InternalMessageInfo

func (m *ActiveUserRequest) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *ActiveUserRequest) GetAdminAccount() string {
	if m != nil {
		return m.AdminAccount
	}
	return ""
}

func (m *ActiveUserRequest) GetAdminUserId() string {
	if m != nil {
		return m.AdminUserId
	}
	return ""
}

func (m *ActiveUserRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *ActiveUserRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type ActiveUserResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ActiveUserResponse) Reset()         { *m = ActiveUserResponse{} }
func (m *ActiveUserResponse) String() string { return proto.CompactTextString(m) }
func (*ActiveUserResponse) ProtoMessage()    {}
func (*ActiveUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_15b55294bed548b5, []int{1}
}
func (m *ActiveUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveUserResponse.Merge(m, src)
}
func (m *ActiveUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActiveUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveUserResponse proto.InternalMessageInfo

func (m *ActiveUserResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ActiveUserResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ActiveUserResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*ActiveUserRequest)(nil), "protos.activeuser.ActiveUserRequest")
	proto.RegisterType((*ActiveUserResponse)(nil), "protos.activeuser.ActiveUserResponse")
}

func init() { proto.RegisterFile("activeuser.proto", fileDescriptor_15b55294bed548b5) }

var fileDescriptor_15b55294bed548b5 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x31, 0x4e, 0xc3, 0x40,
	0x10, 0x45, 0xbd, 0x24, 0x0e, 0xc9, 0x40, 0x41, 0xa6, 0x40, 0xab, 0x14, 0x2b, 0xcb, 0x02, 0xc9,
	0x95, 0x0b, 0x38, 0x41, 0xe8, 0xa8, 0x90, 0x56, 0x42, 0x48, 0xe9, 0x8c, 0x3d, 0x42, 0x2e, 0x62,
	0x07, 0xcf, 0x3a, 0xe7, 0xe0, 0x12, 0xdc, 0x85, 0x32, 0x25, 0x25, 0xb2, 0x2f, 0x82, 0x76, 0xd7,
	0x90, 0xa0, 0x14, 0x54, 0xe3, 0xf7, 0xfd, 0xe7, 0xeb, 0xef, 0xc0, 0x45, 0x96, 0x9b, 0x72, 0x4b,
	0x2d, 0x53, 0x93, 0x6e, 0x9a, 0xda, 0xd4, 0x38, 0x77, 0x83, 0xd3, 0xfd, 0x8f, 0xf8, 0x5d, 0xc0,
	0x7c, 0xe9, 0xf0, 0x91, 0xa9, 0xd1, 0xf4, 0xda, 0x12, 0x1b, 0x5c, 0xc0, 0x34, 0xcb, 0xf3, 0xba,
	0xad, 0x0c, 0x4b, 0x11, 0x8d, 0x92, 0x99, 0xfe, 0x65, 0x8c, 0xe1, 0x3c, 0x2b, 0xd6, 0x65, 0xb5,
	0xf4, 0x82, 0x3c, 0x89, 0x44, 0x32, 0xd3, 0x7f, 0x34, 0x8c, 0xe0, 0xcc, 0xb1, 0xcd, 0xbc, 0x2f,
	0xe4, 0xc8, 0x59, 0x0e, 0x25, 0xbc, 0x84, 0x89, 0x6f, 0x21, 0xc7, 0x91, 0x48, 0xa6, 0x7a, 0x20,
	0xab, 0x17, 0xb4, 0x2d, 0x73, 0x92, 0xa1, 0x5b, 0x1a, 0x28, 0x5e, 0x01, 0x1e, 0xd6, 0xe4, 0x4d,
	0x5d, 0x31, 0xa1, 0x84, 0xd3, 0x35, 0x31, 0x67, 0x2f, 0x24, 0x85, 0xb3, 0xff, 0x20, 0x22, 0x8c,
	0xf3, 0xba, 0x20, 0xd7, 0x2e, 0xd4, 0xee, 0xdb, 0x66, 0xb3, 0xc9, 0x4c, 0xcb, 0xae, 0x50, 0xa8,
	0x07, 0xba, 0x21, 0x80, 0x7d, 0x36, 0x3e, 0xd9, 0xb7, 0x5b, 0x7a, 0x68, 0xf0, 0x2a, 0x3d, 0xba,
	0x58, 0x7a, 0x74, 0xad, 0xc5, 0xf5, 0x3f, 0x2e, 0x5f, 0xf6, 0x2e, 0xfa, 0xe8, 0x94, 0xd8, 0x75,
	0x4a, 0x7c, 0x75, 0x4a, 0xbc, 0xf5, 0x2a, 0xd8, 0xf5, 0x2a, 0xf8, 0xec, 0x55, 0xb0, 0x9a, 0xf8,
	0xfd, 0x67, 0x3f, 0x6f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x4b, 0x97, 0x53, 0xba, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ActiveUserClient is the client API for ActiveUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActiveUserClient interface {
	ActiveOr(ctx context.Context, in *ActiveUserRequest, opts ...grpc.CallOption) (*ActiveUserResponse, error)
}

type activeUserClient struct {
	cc *grpc.ClientConn
}

func NewActiveUserClient(cc *grpc.ClientConn) ActiveUserClient {
	return &activeUserClient{cc}
}

func (c *activeUserClient) ActiveOr(ctx context.Context, in *ActiveUserRequest, opts ...grpc.CallOption) (*ActiveUserResponse, error) {
	out := new(ActiveUserResponse)
	err := c.cc.Invoke(ctx, "/protos.activeuser.ActiveUser/activeOr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActiveUserServer is the server API for ActiveUser service.
type ActiveUserServer interface {
	ActiveOr(context.Context, *ActiveUserRequest) (*ActiveUserResponse, error)
}

// UnimplementedActiveUserServer can be embedded to have forward compatible implementations.
type UnimplementedActiveUserServer struct {
}

func (*UnimplementedActiveUserServer) ActiveOr(ctx context.Context, req *ActiveUserRequest) (*ActiveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveOr not implemented")
}

func RegisterActiveUserServer(s *grpc.Server, srv ActiveUserServer) {
	s.RegisterService(&_ActiveUser_serviceDesc, srv)
}

func _ActiveUser_ActiveOr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveUserServer).ActiveOr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.activeuser.ActiveUser/ActiveOr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveUserServer).ActiveOr(ctx, req.(*ActiveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActiveUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.activeuser.ActiveUser",
	HandlerType: (*ActiveUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "activeOr",
			Handler:    _ActiveUser_ActiveOr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activeuser.proto",
}

func (m *ActiveUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AdminAccount) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintActiveuser(dAtA, i, uint64(len(m.AdminAccount)))
		i += copy(dAtA[i:], m.AdminAccount)
	}
	if len(m.AdminUserId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActiveuser(dAtA, i, uint64(len(m.AdminUserId)))
		i += copy(dAtA[i:], m.AdminUserId)
	}
	if m.Active {
		dAtA[i] = 0x20
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintActiveuser(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	return i, nil
}

func (m *ActiveUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintActiveuser(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActiveuser(dAtA, i, uint64(m.Code))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintActiveuser(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintActiveuser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ActiveUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovActiveuser(uint64(l))
		}
	}
	l = len(m.AdminAccount)
	if l > 0 {
		n += 1 + l + sovActiveuser(uint64(l))
	}
	l = len(m.AdminUserId)
	if l > 0 {
		n += 1 + l + sovActiveuser(uint64(l))
	}
	if m.Active {
		n += 2
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovActiveuser(uint64(l))
	}
	return n
}

func (m *ActiveUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovActiveuser(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovActiveuser(uint64(m.Code))
	}
	if m.Status != 0 {
		n += 1 + sovActiveuser(uint64(m.Status))
	}
	return n
}

func sovActiveuser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActiveuser(x uint64) (n int) {
	return sovActiveuser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActiveUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveuser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveuser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveuser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveuser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActiveuser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActiveuser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActiveuser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActiveuser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActiveuser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActiveuser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActiveuser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActiveuser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActiveuser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActiveuser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActiveuser
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthActiveuser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActiveuser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActiveuser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthActiveuser
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActiveuser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActiveuser   = fmt.Errorf("proto: integer overflow")
)
