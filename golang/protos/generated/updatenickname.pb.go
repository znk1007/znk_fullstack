// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: updatenickname.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UpdateNicknameRequest struct {
	Account   string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	SessionId string `protobuf:"bytes,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Nickname  string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Device    string `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *UpdateNicknameRequest) Reset()         { *m = UpdateNicknameRequest{} }
func (m *UpdateNicknameRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNicknameRequest) ProtoMessage()    {}
func (*UpdateNicknameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e32fb88a5fdd8d, []int{0}
}
func (m *UpdateNicknameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNicknameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNicknameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNicknameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNicknameRequest.Merge(m, src)
}
func (m *UpdateNicknameRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNicknameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNicknameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNicknameRequest proto.InternalMessageInfo

func (m *UpdateNicknameRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UpdateNicknameRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateNicknameRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UpdateNicknameRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UpdateNicknameRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type UpdateNicknameResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *UpdateNicknameResponse) Reset()         { *m = UpdateNicknameResponse{} }
func (m *UpdateNicknameResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateNicknameResponse) ProtoMessage()    {}
func (*UpdateNicknameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8e32fb88a5fdd8d, []int{1}
}
func (m *UpdateNicknameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNicknameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNicknameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNicknameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNicknameResponse.Merge(m, src)
}
func (m *UpdateNicknameResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNicknameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNicknameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNicknameResponse proto.InternalMessageInfo

func (m *UpdateNicknameResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UpdateNicknameResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateNicknameResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*UpdateNicknameRequest)(nil), "protos.updatnickname.UpdateNicknameRequest")
	proto.RegisterType((*UpdateNicknameResponse)(nil), "protos.updatnickname.UpdateNicknameResponse")
}

func init() { proto.RegisterFile("updatenickname.proto", fileDescriptor_e8e32fb88a5fdd8d) }

var fileDescriptor_e8e32fb88a5fdd8d = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0x34, 0x31,
	0x14, 0x85, 0x27, 0xff, 0xbf, 0x33, 0xba, 0xb7, 0xb0, 0x08, 0xeb, 0x12, 0x16, 0x09, 0xcb, 0x56,
	0x82, 0x32, 0x85, 0xbe, 0x81, 0xdd, 0x36, 0x16, 0x03, 0x36, 0x16, 0x42, 0x4c, 0x2e, 0x32, 0xc8,
	0x26, 0xe3, 0xde, 0xc4, 0xe7, 0xb0, 0xf7, 0x85, 0x2c, 0xb7, 0xb4, 0x94, 0x99, 0x17, 0x91, 0x49,
	0x66, 0x14, 0x65, 0x0b, 0xab, 0x9b, 0x73, 0xcf, 0xe5, 0xe4, 0xe3, 0xc0, 0x2c, 0x34, 0x46, 0x79,
	0xb4, 0xb5, 0x7e, 0xb4, 0x6a, 0x83, 0x65, 0xb3, 0x75, 0xde, 0xf1, 0x59, 0x1c, 0x54, 0x46, 0x73,
	0xf4, 0x56, 0xaf, 0x0c, 0x8e, 0x6f, 0xe2, 0xf9, 0xf5, 0xb0, 0xaa, 0xf0, 0x29, 0x20, 0x79, 0x2e,
	0xe0, 0x40, 0x69, 0xed, 0x82, 0xf5, 0x82, 0x2d, 0xd9, 0xe9, 0xb4, 0x1a, 0x25, 0x9f, 0x43, 0x11,
	0x08, 0xb7, 0x6b, 0x23, 0xfe, 0x45, 0x63, 0x50, 0xfc, 0x04, 0xa6, 0x84, 0x44, 0xb5, 0xb3, 0x6b,
	0x23, 0xfe, 0x47, 0xeb, 0x7b, 0xc1, 0x17, 0x70, 0x38, 0xfe, 0x2a, 0x26, 0xd1, 0xfc, 0xd2, 0x7d,
	0xa2, 0xc1, 0xe7, 0x5a, 0xa3, 0xc8, 0x53, 0x62, 0x52, 0xab, 0x3b, 0x98, 0xff, 0x86, 0xa3, 0xc6,
	0x59, 0xc2, 0x9e, 0x6e, 0x83, 0x44, 0xea, 0x01, 0x47, 0xba, 0x41, 0x72, 0x0e, 0x13, 0xed, 0x0c,
	0x46, 0xb6, 0xbc, 0x8a, 0xef, 0x3e, 0x9f, 0xbc, 0xf2, 0x81, 0x22, 0x56, 0x5e, 0x0d, 0xea, 0x22,
	0xc0, 0xd1, 0xcf, 0x7c, 0xae, 0xa1, 0x48, 0xed, 0xf1, 0xb3, 0x72, 0x5f, 0x61, 0xe5, 0xde, 0xb2,
	0x16, 0xe7, 0x7f, 0x3b, 0x4e, 0xf0, 0x57, 0xcb, 0xb7, 0x56, 0xb2, 0x5d, 0x2b, 0xd9, 0x47, 0x2b,
	0xd9, 0x4b, 0x27, 0xb3, 0x5d, 0x27, 0xb3, 0xf7, 0x4e, 0x66, 0xb7, 0x45, 0x8a, 0xb9, 0x4f, 0xf3,
	0xf2, 0x33, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xab, 0x9e, 0x9b, 0xcb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpdateNicknameClient is the client API for UpdateNickname service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateNicknameClient interface {
	Update(ctx context.Context, in *UpdateNicknameRequest, opts ...grpc.CallOption) (*UpdateNicknameResponse, error)
}

type updateNicknameClient struct {
	cc *grpc.ClientConn
}

func NewUpdateNicknameClient(cc *grpc.ClientConn) UpdateNicknameClient {
	return &updateNicknameClient{cc}
}

func (c *updateNicknameClient) Update(ctx context.Context, in *UpdateNicknameRequest, opts ...grpc.CallOption) (*UpdateNicknameResponse, error) {
	out := new(UpdateNicknameResponse)
	err := c.cc.Invoke(ctx, "/protos.updatnickname.UpdateNickname/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateNicknameServer is the server API for UpdateNickname service.
type UpdateNicknameServer interface {
	Update(context.Context, *UpdateNicknameRequest) (*UpdateNicknameResponse, error)
}

// UnimplementedUpdateNicknameServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateNicknameServer struct {
}

func (*UnimplementedUpdateNicknameServer) Update(ctx context.Context, req *UpdateNicknameRequest) (*UpdateNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterUpdateNicknameServer(s *grpc.Server, srv UpdateNicknameServer) {
	s.RegisterService(&_UpdateNickname_serviceDesc, srv)
}

func _UpdateNickname_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateNicknameServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.updatnickname.UpdateNickname/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateNicknameServer).Update(ctx, req.(*UpdateNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateNickname_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.updatnickname.UpdateNickname",
	HandlerType: (*UpdateNicknameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _UpdateNickname_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updatenickname.proto",
}

func (m *UpdateNicknameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNicknameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.SessionId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(len(m.SessionId)))
		i += copy(dAtA[i:], m.SessionId)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	return i, nil
}

func (m *UpdateNicknameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNicknameResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(m.Code))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUpdatenickname(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintUpdatenickname(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateNicknameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovUpdatenickname(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUpdatenickname(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovUpdatenickname(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUpdatenickname(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovUpdatenickname(uint64(l))
	}
	return n
}

func (m *UpdateNicknameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovUpdatenickname(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovUpdatenickname(uint64(m.Code))
	}
	if m.Status != 0 {
		n += 1 + sovUpdatenickname(uint64(m.Status))
	}
	return n
}

func sovUpdatenickname(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdatenickname(x uint64) (n int) {
	return sovUpdatenickname(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateNicknameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatenickname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNicknameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNicknameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatenickname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNicknameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatenickname
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNicknameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNicknameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatenickname(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpdatenickname
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdatenickname(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdatenickname
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdatenickname
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdatenickname
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthUpdatenickname
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUpdatenickname
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUpdatenickname(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthUpdatenickname
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUpdatenickname = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdatenickname   = fmt.Errorf("proto: integer overflow")
)
