// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: conn.proto

package socket

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConnParams struct {
	PingInterval int64    `protobuf:"varint,1,opt,name=PingInterval,proto3" json:"PingInterval,omitempty"`
	PingTimeout  int64    `protobuf:"varint,2,opt,name=PingTimeout,proto3" json:"PingTimeout,omitempty"`
	SID          string   `protobuf:"bytes,3,opt,name=SID,proto3" json:"SID,omitempty"`
	Upgrades     []string `protobuf:"bytes,4,rep,name=Upgrades,proto3" json:"Upgrades,omitempty"`
}

func (m *ConnParams) Reset()         { *m = ConnParams{} }
func (m *ConnParams) String() string { return proto.CompactTextString(m) }
func (*ConnParams) ProtoMessage()    {}
func (*ConnParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f401a58c1fc7ceef, []int{0}
}
func (m *ConnParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnParams.Merge(m, src)
}
func (m *ConnParams) XXX_Size() int {
	return m.Size()
}
func (m *ConnParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnParams.DiscardUnknown(m)
}

var xxx_messageInfo_ConnParams proto.InternalMessageInfo

func (m *ConnParams) GetPingInterval() int64 {
	if m != nil {
		return m.PingInterval
	}
	return 0
}

func (m *ConnParams) GetPingTimeout() int64 {
	if m != nil {
		return m.PingTimeout
	}
	return 0
}

func (m *ConnParams) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *ConnParams) GetUpgrades() []string {
	if m != nil {
		return m.Upgrades
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnParams)(nil), "socketprotos.conn.ConnParams")
}

func init() { proto.RegisterFile("conn.proto", fileDescriptor_f401a58c1fc7ceef) }

var fileDescriptor_f401a58c1fc7ceef = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0xcf, 0xcb,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0xce, 0x4f, 0xce, 0x4e, 0x2d, 0x01, 0x73,
	0x8a, 0xf5, 0x40, 0x12, 0x4a, 0x0d, 0x8c, 0x5c, 0x5c, 0xce, 0xf9, 0x79, 0x79, 0x01, 0x89, 0x45,
	0x89, 0xb9, 0xc5, 0x42, 0x4a, 0x5c, 0x3c, 0x01, 0x99, 0x79, 0xe9, 0x9e, 0x79, 0x25, 0xa9, 0x45,
	0x65, 0x89, 0x39, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x28, 0x62, 0x42, 0x0a, 0x5c, 0xdc,
	0x20, 0x7e, 0x48, 0x66, 0x6e, 0x6a, 0x7e, 0x69, 0x89, 0x04, 0x13, 0x58, 0x09, 0xb2, 0x90, 0x90,
	0x00, 0x17, 0x73, 0xb0, 0xa7, 0x8b, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x88, 0x29, 0x24,
	0xc5, 0xc5, 0x11, 0x5a, 0x90, 0x5e, 0x94, 0x98, 0x92, 0x5a, 0x2c, 0xc1, 0xa2, 0xc0, 0xac, 0xc1,
	0x19, 0x04, 0xe7, 0x3b, 0x29, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47,
	0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x14,
	0x1b, 0xc4, 0xbd, 0x49, 0x6c, 0x60, 0x17, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x5a,
	0xdd, 0xfb, 0xcc, 0x00, 0x00, 0x00,
}

func (m *ConnParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PingInterval != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConn(dAtA, i, uint64(m.PingInterval))
	}
	if m.PingTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintConn(dAtA, i, uint64(m.PingTimeout))
	}
	if len(m.SID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConn(dAtA, i, uint64(len(m.SID)))
		i += copy(dAtA[i:], m.SID)
	}
	if len(m.Upgrades) > 0 {
		for _, s := range m.Upgrades {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintConn(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConnParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingInterval != 0 {
		n += 1 + sovConn(uint64(m.PingInterval))
	}
	if m.PingTimeout != 0 {
		n += 1 + sovConn(uint64(m.PingTimeout))
	}
	l = len(m.SID)
	if l > 0 {
		n += 1 + l + sovConn(uint64(l))
	}
	if len(m.Upgrades) > 0 {
		for _, s := range m.Upgrades {
			l = len(s)
			n += 1 + l + sovConn(uint64(l))
		}
	}
	return n
}

func sovConn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConn(x uint64) (n int) {
	return sovConn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConnParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingInterval", wireType)
			}
			m.PingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingTimeout", wireType)
			}
			m.PingTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrades", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Upgrades = append(m.Upgrades, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConn
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConn
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConn
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConn
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConn(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConn
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConn = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConn   = fmt.Errorf("proto: integer overflow")
)
