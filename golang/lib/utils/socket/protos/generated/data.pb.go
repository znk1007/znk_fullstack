// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data.proto

package protos

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Header_Type int32

const (
	Header_connect     Header_Type = 0
	Header_disconect   Header_Type = 1
	Header_event       Header_Type = 2
	Header_ack         Header_Type = 4
	Header_error       Header_Type = 5
	Header_binaryEvent Header_Type = 6
	Header_binaryAck   Header_Type = 7
	Header_typeMax     Header_Type = 8
)

var Header_Type_name = map[int32]string{
	0: "connect",
	1: "disconect",
	2: "event",
	4: "ack",
	5: "error",
	6: "binaryEvent",
	7: "binaryAck",
	8: "typeMax",
}

var Header_Type_value = map[string]int32{
	"connect":     0,
	"disconect":   1,
	"event":       2,
	"ack":         4,
	"error":       5,
	"binaryEvent": 6,
	"binaryAck":   7,
	"typeMax":     8,
}

func (x Header_Type) String() string {
	return proto.EnumName(Header_Type_name, int32(x))
}

func (Header_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0, 0}
}

type Header struct {
	Type      Header_Type `protobuf:"varint,1,opt,name=type,proto3,enum=socketprotos.data.Header_Type" json:"type,omitempty"`
	Namespace string      `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ID        uint64      `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	NeedAck   bool        `protobuf:"varint,4,opt,name=needAck,proto3" json:"needAck,omitempty"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetType() Header_Type {
	if m != nil {
		return m.Type
	}
	return Header_connect
}

func (m *Header) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Header) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Header) GetNeedAck() bool {
	if m != nil {
		return m.NeedAck
	}
	return false
}

type Buffer struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	IsBinary bool   `protobuf:"varint,2,opt,name=isBinary,proto3" json:"isBinary,omitempty"`
	Num      uint64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Buffer) Reset()         { *m = Buffer{} }
func (m *Buffer) String() string { return proto.CompactTextString(m) }
func (*Buffer) ProtoMessage()    {}
func (*Buffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{1}
}
func (m *Buffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Buffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Buffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Buffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Buffer.Merge(m, src)
}
func (m *Buffer) XXX_Size() int {
	return m.Size()
}
func (m *Buffer) XXX_DiscardUnknown() {
	xxx_messageInfo_Buffer.DiscardUnknown(m)
}

var xxx_messageInfo_Buffer proto.InternalMessageInfo

func (m *Buffer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Buffer) GetIsBinary() bool {
	if m != nil {
		return m.IsBinary
	}
	return false
}

func (m *Buffer) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterEnum("socketprotos.data.Header_Type", Header_Type_name, Header_Type_value)
	proto.RegisterType((*Header)(nil), "socketprotos.data.Header")
	proto.RegisterType((*Buffer)(nil), "socketprotos.data.Buffer")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_871986018790d2fd) }

var fileDescriptor_871986018790d2fd = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0x34, 0xcd, 0xcf, 0x2d, 0x94, 0x70, 0xa7, 0x08, 0x21, 0x2b, 0xea, 0x94, 0x29,
	0x43, 0x79, 0x82, 0x56, 0x45, 0xa2, 0x48, 0x2c, 0x11, 0x13, 0x9b, 0xeb, 0xdc, 0x4a, 0x55, 0x54,
	0x27, 0x72, 0x52, 0x44, 0xdf, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0xda, 0x57, 0xe0, 0x01, 0x90,
	0x1d, 0x7e, 0x06, 0x26, 0xdf, 0x73, 0x7c, 0xee, 0x91, 0x3f, 0x03, 0x94, 0xa2, 0x13, 0x79, 0xa3,
	0xeb, 0xae, 0xc6, 0xcb, 0xb6, 0x96, 0x15, 0x75, 0x56, 0xb4, 0xb9, 0xb9, 0x98, 0x7c, 0x32, 0xf0,
	0xef, 0x48, 0x94, 0xa4, 0x71, 0x0a, 0x5e, 0xb7, 0x6f, 0x28, 0x61, 0x29, 0xcb, 0xc6, 0x53, 0x9e,
	0xff, 0x0b, 0xe7, 0x7d, 0x30, 0x7f, 0xdc, 0x37, 0x54, 0xd8, 0x2c, 0x5e, 0x43, 0xa4, 0xc4, 0x96,
	0xda, 0x46, 0x48, 0x4a, 0xdc, 0x94, 0x65, 0x51, 0xf1, 0x67, 0xe0, 0x18, 0xdc, 0xe5, 0x22, 0x19,
	0xa4, 0x2c, 0xf3, 0x0a, 0x77, 0xb9, 0xc0, 0x04, 0x02, 0x45, 0x54, 0xce, 0x64, 0x95, 0x78, 0x29,
	0xcb, 0xc2, 0xe2, 0x47, 0x4e, 0x14, 0x78, 0xa6, 0x15, 0x47, 0x10, 0xc8, 0x5a, 0x29, 0x92, 0x5d,
	0xec, 0xe0, 0x39, 0x44, 0xe5, 0xa6, 0x95, 0xb5, 0x95, 0x0c, 0x23, 0x18, 0xd2, 0x33, 0xa9, 0x2e,
	0x76, 0x31, 0x80, 0x81, 0x90, 0x55, 0xec, 0x59, 0x4f, 0xeb, 0x5a, 0xc7, 0x43, 0xbc, 0x80, 0xd1,
	0x6a, 0xa3, 0x84, 0xde, 0xdf, 0xda, 0x90, 0x6f, 0xd6, 0x7b, 0x63, 0x26, 0xab, 0x38, 0x30, 0xd5,
	0xe6, 0xc9, 0x0f, 0xe2, 0x25, 0x0e, 0x27, 0xf7, 0xe0, 0xcf, 0x77, 0xeb, 0x35, 0x69, 0x44, 0xf0,
	0x0c, 0x9b, 0xa5, 0x3e, 0x2b, 0xec, 0x8c, 0x57, 0x10, 0x6e, 0xda, 0xb9, 0xdd, 0xb5, 0x50, 0x61,
	0xf1, 0xab, 0x31, 0x86, 0x81, 0xda, 0x6d, 0xbf, 0xa1, 0xcc, 0x38, 0x4f, 0xdf, 0x8e, 0x9c, 0x1d,
	0x8e, 0x9c, 0x7d, 0x1c, 0x39, 0x7b, 0x3d, 0x71, 0xe7, 0x70, 0xe2, 0xce, 0xfb, 0x89, 0x3b, 0x4f,
	0x7e, 0xff, 0x79, 0xab, 0xfe, 0xbc, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xf2, 0x54, 0x86,
	0x8c, 0x01, 0x00, 0x00,
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Type))
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.ID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.ID))
	}
	if m.NeedAck {
		dAtA[i] = 0x20
		i++
		if m.NeedAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Buffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Buffer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.IsBinary {
		dAtA[i] = 0x10
		i++
		if m.IsBinary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovData(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovData(uint64(m.ID))
	}
	if m.NeedAck {
		n += 2
	}
	return n
}

func (m *Buffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.IsBinary {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovData(uint64(m.Num))
	}
	return n
}

func sovData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Header_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedAck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Buffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Buffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Buffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBinary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBinary = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthData
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData   = fmt.Errorf("proto: integer overflow")
)
